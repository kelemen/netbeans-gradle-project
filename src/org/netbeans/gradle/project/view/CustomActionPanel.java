package org.netbeans.gradle.project.view;

import java.awt.event.KeyEvent;
import java.util.Arrays;
import javax.swing.JTextArea;
import org.netbeans.gradle.project.StringUtils;
import org.netbeans.gradle.project.api.task.GradleCommandTemplate;
import org.netbeans.gradle.project.properties.PredefinedTask;

@SuppressWarnings("serial") // Don't care about serialization
public class CustomActionPanel extends javax.swing.JPanel {
    public CustomActionPanel() {
        initComponents();
    }

    public void updatePanel(PredefinedTask task) {
        StringBuilder tasks = new StringBuilder(1024);

        for (PredefinedTask.Name name: task.getTaskNames()) {
            tasks.append(name.getName());
            tasks.append(' ');
        }
        jTasksEdit.setText(tasks.toString());

        StringBuilder arguments = new StringBuilder(1024);
        for (String arg: task.getArguments()) {
            arguments.append(arg);
            arguments.append('\n');
        }
        jArgsTextArea.setText(arguments.toString());

        StringBuilder jvmArguments = new StringBuilder(1024);
        for (String arg: task.getJvmArguments()) {
            jvmArguments.append(arg);
            jvmArguments.append('\n');
        }
        jJvmArgsTextArea.setText(jvmArguments.toString());
        jNonBlockingCheck.setSelected(task.isNonBlocking());
    }

    public GradleCommandTemplate tryGetGradleCommand() {
        String[] tasks = getTasks();
        if (tasks.length == 0) {
            return null;
        }

        GradleCommandTemplate.Builder builder = new GradleCommandTemplate.Builder(Arrays.asList(tasks));
        builder.setArguments(Arrays.asList(getArguments()));
        builder.setJvmArguments(Arrays.asList(getJvmArguments()));
        builder.setBlocking(!isNonBlocking());
        return builder.create();
    }

    public String[] getTasks() {
        String text = jTasksEdit.getText();
        if (text == null) {
            return new String[0];
        }

        return StringUtils.splitBySpaces(text);
    }

    public String[] getArguments() {
        String text = jArgsTextArea.getText();
        if (text == null) {
            return new String[0];
        }

        return StringUtils.splitLines(text);
    }

    public String[] getJvmArguments() {
        String text = jJvmArgsTextArea.getText();
        if (text == null) {
            return new String[0];
        }

        return StringUtils.splitLines(text);
    }

    public boolean isNonBlocking() {
        return jNonBlockingCheck.isSelected();
    }

    private void traverseWithTab(JTextArea textArea, KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_TAB) {
            boolean forward = (event.getModifiersEx() & KeyEvent.SHIFT_DOWN_MASK) == 0;
            if (forward) {
                textArea.transferFocus();
            }
            else {
                textArea.transferFocusBackward();
            }
            event.consume();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTasksCaption = new javax.swing.JLabel();
        jTasksEdit = new javax.swing.JTextField();
        jArgsCaption = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jArgsTextArea = new javax.swing.JTextArea();
        jJvmArgsCaption = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jJvmArgsTextArea = new javax.swing.JTextArea();
        jNonBlockingCheck = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jTasksCaption, org.openide.util.NbBundle.getMessage(CustomActionPanel.class, "CustomActionPanel.jTasksCaption.text")); // NOI18N

        jTasksEdit.setText(org.openide.util.NbBundle.getMessage(CustomActionPanel.class, "CustomActionPanel.jTasksEdit.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jArgsCaption, org.openide.util.NbBundle.getMessage(CustomActionPanel.class, "CustomActionPanel.jArgsCaption.text")); // NOI18N

        jArgsTextArea.setColumns(20);
        jArgsTextArea.setRows(5);
        jArgsTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jArgsTextAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jArgsTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(jJvmArgsCaption, org.openide.util.NbBundle.getMessage(CustomActionPanel.class, "CustomActionPanel.jJvmArgsCaption.text")); // NOI18N

        jJvmArgsTextArea.setColumns(20);
        jJvmArgsTextArea.setRows(5);
        jJvmArgsTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jJvmArgsTextAreaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jJvmArgsTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(jNonBlockingCheck, org.openide.util.NbBundle.getMessage(CustomActionPanel.class, "CustomActionPanel.jNonBlockingCheck.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTasksEdit)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jNonBlockingCheck)
                            .addComponent(jTasksCaption)
                            .addComponent(jArgsCaption)
                            .addComponent(jJvmArgsCaption))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTasksCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTasksEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jArgsCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jJvmArgsCaption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jNonBlockingCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jArgsTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jArgsTextAreaKeyPressed
        traverseWithTab(jArgsTextArea, evt);
    }//GEN-LAST:event_jArgsTextAreaKeyPressed

    private void jJvmArgsTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jJvmArgsTextAreaKeyPressed
        traverseWithTab(jJvmArgsTextArea, evt);
    }//GEN-LAST:event_jJvmArgsTextAreaKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jArgsCaption;
    private javax.swing.JTextArea jArgsTextArea;
    private javax.swing.JLabel jJvmArgsCaption;
    private javax.swing.JTextArea jJvmArgsTextArea;
    private javax.swing.JCheckBox jNonBlockingCheck;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jTasksCaption;
    private javax.swing.JTextField jTasksEdit;
    // End of variables declaration//GEN-END:variables
}
